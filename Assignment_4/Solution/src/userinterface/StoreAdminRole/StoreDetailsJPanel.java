/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.StoreAdminRole;

import business.Drug;
import business.Inventory;
import business.InventoryItem;
import business.MasterInventoryDirectory;
import business.Pharma;
import business.PharmaDirectory;
import business.Store;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aksha
 */
public class StoreDetailsJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Store st;
    private PharmaDirectory pharmaDirectory;
    private Pharma p;
    Inventory inventory;
    private MasterInventoryDirectory masterInventoryDirectory;
    boolean isCheckedOut = false;

    /**
     * Creates new form StoreDetailsJPanel
     */
    public StoreDetailsJPanel(JPanel userProcessContainer, Store st, PharmaDirectory pharmaDirectory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.st = st;
        this.pharmaDirectory = pharmaDirectory;
        masterInventoryDirectory = st.getMasterInventoryDirectory();
        populateSupplierCombo();
    }

    public void populateSupplierCombo() {
        storejText.setText(st.getStoreName());
        pharmajComboBox1.removeAllItems();
        for (Pharma p : pharmaDirectory.getPharmaList()) {
            pharmajComboBox1.addItem(p);
        }
        populateDrugTable();
        if (!isCheckedOut) {
            inventory = new Inventory();
        }
    }

    private void populateDrugTable() {
        DefaultTableModel dtm = (DefaultTableModel) drugdirectoryjTable1.getModel();
        Pharma p = (Pharma) pharmajComboBox1.getSelectedItem();
        dtm.setRowCount(0);
        if (p != null) {
            for (Drug d : p.getDrugDirectory().getDrugList()) {
                Object row[] = new Object[5];
                row[0] = d;
                row[1] = d.getExpiryDate();
                row[2] = d.getPrice();
                row[3] = d.getDrugID();
                row[4] = d.getCurrentStock();
                dtm.addRow(row);
            }
        }
    }

    private void refreshDrugTable(String keyWord) {
        int rowCount = drugdirectoryjTable1.getRowCount();
        DefaultTableModel model = (DefaultTableModel) drugdirectoryjTable1.getModel();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }

        for (Pharma p : pharmaDirectory.getPharmaList()) {
            for (Drug d : p.getDrugDirectory().getDrugList()) {
                if (keyWord.equals(d.getDrugName())) {
                    Object row[] = new Object[5];
                    row[0] = d;
                    row[1] = d.getDrugName();

                    row[2] = d.getExpiryDate();
                    row[3] = d.getPrice();
                    row[4] = d.getCurrentStock();

                    model.addRow(row);
                }
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        storejText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        pharmajComboBox1 = new javax.swing.JComboBox();
        addInventoryjButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        drugdirectoryjTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderjTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        quantitySpinner = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        searchjText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        salesPricejText = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        updatejText = new javax.swing.JTextField();
        removejButton = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        jLabel1.setText("Store Name");

        storejText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storejTextActionPerformed(evt);
            }
        });

        jLabel2.setText("Select Pharma");

        pharmajComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        pharmajComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pharmajComboBox1ActionPerformed(evt);
            }
        });

        addInventoryjButton.setText("Add Inventory");
        addInventoryjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addInventoryjButtonActionPerformed(evt);
            }
        });

        drugdirectoryjTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Expiry Date", "Price", "Drug ID", "Current Stock"
            }
        ));
        jScrollPane1.setViewportView(drugdirectoryjTable1);

        orderjTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Price", "Drug ID", "Quantity", "Total Price"
            }
        ));
        jScrollPane2.setViewportView(orderjTable1);

        jLabel3.setText("Stock");

        jButton1.setText("Update Inventory");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Search");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Sales Price");

        jButton3.setText("Check Out");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("<<BACK");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("View Drug");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        removejButton.setText("REMOVE");
        removejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removejButtonActionPerformed(evt);
            }
        });

        jButton6.setText("View Inventory Item");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(storejText, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(37, 37, 37)
                                .addComponent(pharmajComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(122, 122, 122)
                                .addComponent(jButton2))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton5)
                                .addGap(119, 119, 119)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(salesPricejText, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(addInventoryjButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchjText, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButton4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removejButton))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButton6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(updatejText, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(37, 37, 37)
                            .addComponent(jButton1)
                            .addGap(18, 18, 18)
                            .addComponent(jButton3))))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(storejText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(pharmajComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchjText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addInventoryjButton)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(salesPricejText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton1)
                    .addComponent(updatejText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removejButton)
                    .addComponent(jButton4))
                .addContainerGap(343, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void pharmajComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pharmajComboBox1ActionPerformed
             populateDrugTable();        // TODO add your handling code here:
    }//GEN-LAST:event_pharmajComboBox1ActionPerformed

    private void storejTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storejTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_storejTextActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
if (inventory.getInventoryList().size() > 0) {
            ArrayList<InventoryItem> inventoryList = inventory.getInventoryList();
            for (InventoryItem inventoryItem : inventoryList) {
                Drug d = inventoryItem.getDrug();
                d.setCurrentStock(inventoryItem.getStock() + d.getCurrentStock());
            }
            inventory.getInventoryList().removeAll(inventoryList);
        }
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int row = drugdirectoryjTable1.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "You didn't select any rows from the table!");
            return;
        }
        else{
        Drug d = (Drug)drugdirectoryjTable1.getValueAt(row,0);
        ViewDrugDetailsJPanel vdd = new ViewDrugDetailsJPanel(userProcessContainer,d);
        userProcessContainer.add("ViewDrugDetailsJPanel", vdd);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer); 
        }// TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void addInventoryjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addInventoryjButtonActionPerformed
   int selectedRow = drugdirectoryjTable1.getSelectedRow();
   Drug selectedDrug;
        int salesPrice = 0;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            selectedDrug = (Drug) drugdirectoryjTable1.getValueAt(selectedRow, 0);
        }
        try {
            salesPrice = Integer.parseInt(salesPricejText.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Enter valid sales price", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (salesPrice < selectedDrug.getPrice()) {
            JOptionPane.showMessageDialog(this, "Sales Price should be more actual", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int fetchedQty = (Integer) quantitySpinner.getValue();
        if (fetchedQty <= 0) {
            JOptionPane.showMessageDialog(this, "Selected atlest 1 quantity", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (fetchedQty <= selectedDrug.getCurrentStock()) {
            boolean alreadyPresent = false;
            for (InventoryItem inventoryItem : inventory.getInventoryList()) {
                if (inventoryItem.getDrug() == selectedDrug) {
                    int oldAvail = selectedDrug.getCurrentStock();
                    int newAvail = oldAvail - fetchedQty;
                    selectedDrug.setCurrentStock(newAvail);
                    inventoryItem.setStock(fetchedQty + inventoryItem.getStock());
                    alreadyPresent = true;
                    refreshInventoryTable();
                    populateDrugTable();
                    break;
                }
            }
            if (!alreadyPresent) {
                int oldAvail = selectedDrug.getCurrentStock();
                int newAvail = oldAvail - fetchedQty;
                selectedDrug.setCurrentStock(newAvail);
                inventory.addInventoryItem(selectedDrug, fetchedQty, salesPrice);
                refreshInventoryTable();
                populateDrugTable();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Quantity > Availability!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_addInventoryjButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
if (inventory.getInventoryList().size() > 0) {
            masterInventoryDirectory.addInventory(inventory);
            isCheckedOut = true;
            JOptionPane.showMessageDialog(null, "Order added ssuccessfully!!");
            inventory = new Inventory();
            refreshInventoryTable();
            populateDrugTable();
        } else {
            JOptionPane.showMessageDialog(null, "Order not added as there are no items!!");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
 int selectedRow = orderjTable1.getSelectedRow();
        
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (!updatejText.getText().isEmpty() && !updatejText.getText().equals("0")) {
            InventoryItem inventoryItem = (InventoryItem) orderjTable1.getValueAt(selectedRow, 0);
            int currentAvail = inventoryItem.getDrug().getCurrentStock();
            int oldQty = inventoryItem.getStock();
            int newQty = Integer.parseInt(updatejText.getText());
            if (newQty > (currentAvail + oldQty)) {
                JOptionPane.showMessageDialog(null, "Quantity is more than the availability");
                //return;
            } else {
                if (newQty <= 0) {
                    JOptionPane.showMessageDialog(null, "Invalid qty");
                    return;
                }
                inventoryItem.setStock(newQty);
                inventoryItem.getDrug().setCurrentStock(currentAvail + (oldQty - newQty));
                refreshInventoryTable();
                populateDrugTable();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Quantity cannot be zero!!");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String keyWord = searchjText.getText();
        refreshDrugTable(keyWord);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void removejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removejButtonActionPerformed
       
        int row = orderjTable1.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Failed to retrive selected row");
            return;
        }

        InventoryItem i = (InventoryItem) orderjTable1.getValueAt(row, 0);
        int oldQuantity = i.getDrug().getCurrentStock();
        int orderQuantity = i.getStock();
        int newQuantity = oldQuantity + orderQuantity;
        i.getDrug().setCurrentStock(newQuantity);
        inventory.removeInventoryItem(i);
        JOptionPane.showMessageDialog(null, "The order item of " + orderQuantity + "of " + i + " has been removed.");
        refreshInventoryTable();
        populateDrugTable();        // TODO add your handling code here:
    }//GEN-LAST:event_removejButtonActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
 

        int row = orderjTable1.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Failed to retrive selected row");
            return;
        }
        InventoryItem i = (InventoryItem) orderjTable1.getValueAt(row, 0);
        ViewInventoryItemJPanel vii = new ViewInventoryItemJPanel(userProcessContainer, i);
        userProcessContainer.add("ViewInventoryItemJPanel", vii);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

 public void refreshInventoryTable() {
        int rowCount = orderjTable1.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            ((DefaultTableModel) orderjTable1.getModel()).removeRow(i);
        }

        for (InventoryItem i : inventory.getInventoryList()) {
            Object row[] = new Object[5];
            row[0] = i;
            row[1] = i.getSalesPrice();
            row[2] = i.getDrug().getDrugID();
            row[3] = i.getStock();
            row[4] = i.getSalesPrice() * i.getStock();
            ((DefaultTableModel) orderjTable1.getModel()).addRow(row);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addInventoryjButton;
    private javax.swing.JTable drugdirectoryjTable1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderjTable1;
    private javax.swing.JComboBox pharmajComboBox1;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JButton removejButton;
    private javax.swing.JTextField salesPricejText;
    private javax.swing.JTextField searchjText;
    private javax.swing.JTextField storejText;
    private javax.swing.JTextField updatejText;
    // End of variables declaration//GEN-END:variables
}
